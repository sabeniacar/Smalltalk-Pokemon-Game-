Object subclass: #GameController	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameController class	instanceVariableNames: ''!!GameController class methodsFor: 'as yet unclassified' stamp: 'selimabenyakar 5/25/2016 13:00'!player1: st1 player2: st2 isSpecialAction: bool		| pokeFirst pokeSecond currentState lastMove turn potionFirst potionSecond prob damage fullHp1 fullHp2 turn1 turn2 win1 win2 def1 def2 act1 act2 r1 r2|	win1:=0.win2:=0.	"loop 2 times for each player to start first, 2* 10 * 10 games in total "1 to: 2 do: [ :m|   1 to: 10 do: [:j|          	1 to: 10 do: [:i|"potions not used initially"potionFirst:=true.potionSecond :=true."give players new pokemons"j=1 ifTrue: [pokeFirst:= Pikachu new.]. j=2 ifTrue: [pokeFirst:= Voltorb new.]. j=3 ifTrue: [pokeFirst:= Charmender new.]. j=4 ifTrue: [pokeFirst:= Magmar new.]. j=5 ifTrue: [pokeFirst:= Bulbasaur new.]. j=6 ifTrue: [pokeFirst:= Oddish new.]. j=7 ifTrue: [pokeFirst:= Geodude new.]. j=8 ifTrue: [pokeFirst:= Onix new.]. j=9 ifTrue: [pokeFirst:= Krabby new.]. j=10 ifTrue: [pokeFirst:= Squirtle new.]. i=1 ifTrue: [pokeSecond:= Pikachu new.]. i=2 ifTrue: [pokeSecond:= Voltorb new.]. i=3 ifTrue: [pokeSecond:= Charmender new.]. i=4 ifTrue: [pokeSecond:= Magmar new.]. i=5 ifTrue: [pokeSecond:= Bulbasaur new.]. i=6 ifTrue: [pokeSecond:= Oddish new.]. i=7 ifTrue: [pokeSecond:= Geodude new.]. i=8 ifTrue: [pokeSecond:= Onix new.]. i=9 ifTrue: [pokeSecond:= Krabby new.]. i=10 ifTrue: [pokeSecond:= Squirtle new.]. currentState:= Array new: 8. lastMove:= ''."defences of pokemons"def2:=	pokeSecond defense.def1:=pokeFirst defense."hps of pokemons"fullHp1:=pokeFirst hp.fullHp2:=pokeSecond hp.	 			 turn1:=0.turn2:=0.turn:=m%2."set pokemons"st1 setPokemon: pokeFirst.st2 setPokemon: pokeSecond.act1:=false.act2:=false.		"finish the battle when a total of 40 actions happened"		[ turn1+turn2 < 41]	whileTrue: [  													 "player1's turn"						(turn%2=1) & (pokeSecond hp > 0) & (pokeFirst hp >0) ifTrue: [ 										r1:=false.									"if special action used it will last for 1 more turn"								act1=false ifTrue:[ pokeFirst defense: def1.]										     ifFalse:[act1:=false. r1:=true.].								"fill currentState array according to enemy's current info"								Transcript  show: 'player1';cr.								currentState 									at: 1 put: pokeSecond hp;									at: 2 put: pokeSecond type;									at: 3 put: pokeSecond defense;									at: 4 put: potionSecond;									at: 5 put: lastMove;									at: 6 put: bool;									at: 7 put: potionFirst;									at: 8 put: r1.																"last move will be the last action currently happened"									lastMove:=st1 getAction: currentState.														lastMove='Attack' ifTrue: [								"%10 miss when attack"								prob:= #(1 0 0 0 0 0 0 0 0 0) shuffled at:1.								"if not missed give a damage value according to pokemon's types"									prob=0 ifTrue: [									  (pokeFirst weak includes: pokeSecond type) ifTrue:[ 										   damage:=((pokeFirst attack * 0.8) rounded - pokeSecond defense). 											] 										   ifFalse:[ (pokeFirst powerful includes: pokeSecond type) ifTrue:[ 										   damage:=((pokeFirst attack * 2) rounded - pokeSecond defense).											]										   ifFalse:[damage:=((pokeFirst attack) rounded - pokeSecond defense).].													].																						"if damage is smaller or equal to zero give 1 damage to enemy"											damage>0 ifTrue: [pokeSecond hp: (pokeSecond hp - damage)]														ifFalse: [pokeSecond hp: (pokeSecond hp - 1)].																									"if enemy's hp is smaller or equal to zero player1 wins"													(pokeSecond hp <= 0) ifTrue:[turn2:=41. win1:=win1+1.].												]ifFalse:[lastMove='Attack(Missed)'].																				  																	 ].																							"defense of the pokemon is doubled for only 2 rounds"							lastMove='Special Action' ifTrue: [												def1:=pokeFirst defense.												pokeFirst defense: (pokeFirst defense)*2.												act1:=true.									 ].																							"increase defense of pokemon by 1 when defense action selected"														lastMove='Defense' ifTrue: [pokeFirst defense: (pokeFirst defense + 1). def1:=pokeFirst defense. ].														"fill pokemon's hp, potion action can't be used again"							lastMove='Potion' ifTrue: [pokeFirst hp: fullHp1. potionFirst:=false.].						turn:=turn+1.							turn1:= turn1+1.						]						"player2's turn"						  ifFalse: [(pokeFirst hp >0) & (pokeSecond hp >0) ifTrue:[								r2:=false.								"if special action used it will last for 1 more turn"								act2=false ifTrue:[pokeSecond defense: def2.]											  ifFalse:[act2:=false. r2:=true.].								"fill currentState array according to enemy's current info"								Transcript  show: 'player2';cr.								currentState 									at: 1 put: pokeFirst hp;									at: 2 put: pokeFirst type;									at: 3 put: pokeFirst defense;									at: 4 put: potionFirst;									at: 5 put: lastMove;									at: 6 put: bool;									at: 7 put: potionSecond;									at: 8 put: r2.																"last move will be the last action currently happened"									lastMove:=st2 getAction: currentState.														lastMove='Attack' ifTrue: [								"%10 miss when attack"								prob:= #(1 0 0 0 0 0 0 0 0 0) shuffled at:1.								"if not missed give a damage value according to pokemon's types"									prob=0 ifTrue: [									(pokeSecond  weak includes: pokeFirst type) ifTrue:[ 										   damage:=((pokeSecond attack * 0.8) rounded - pokeFirst defense).											] 										   ifFalse:[ (pokeSecond  powerful includes: pokeFirst  type) ifTrue:[ 										   damage:=((pokeSecond attack * 2) rounded - pokeFirst defense).											]										   ifFalse:[damage:=((pokeSecond attack) rounded - pokeFirst defense).].													].																						"if damage is smaller or equal to zero give 1 damage to enemy"											damage>0 ifTrue: [pokeFirst hp: (pokeFirst hp - damage)]														ifFalse: [pokeFirst hp: (pokeFirst hp - 1)].																									"if enemy's hp is smaller or equal to zero player2 wins"													(pokeFirst hp <= 0) ifTrue:[turn2:=41. win2:=win2+1.].												]ifFalse:[lastMove:='Attack(Missed)'].																				  									 									 ].																							"defense of the pokemon is doubled for only 2 rounds"							lastMove='Special Action' ifTrue: [												def2:=	pokeSecond defense .									  									 		   pokeSecond defense: (pokeSecond defense)*2.												act2:=true.									 ].																						"increase defense of pokemon by 1 when defense action selected"								lastMove='Defense' ifTrue: [pokeSecond defense: (pokeSecond defense + 1). def2:=pokeSecond defense.].														"fill pokemon's hp, potion action can't be used again"							lastMove='Potion' ifTrue: [pokeSecond hp: fullHp2. potionSecond:=false.].													 	].						turn:=turn+1.							turn2:= turn2+1.						].							].			"after 40 rounds one with the higher hp wins"		(pokeSecond hp > 0) & (pokeFirst hp > 0) ifTrue:[ pokeSecond hp > pokeFirst hp ifTrue:[win2:=win2+1.] ifFalse:[win1:=win1+1.].].							Transcript  show: 'Battle Ended';cr.   ]. ].].	"print the total score"		Transcript  show: 'player1: '.		Transcript  show: win1.		Transcript  show: '';cr.			   Transcript  show: 'player2: '.		Transcript  show: win2.		Transcript  show: '';cr.! !Object subclass: #Unit	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!Unit subclass: #Pokemon	instanceVariableNames: 'defense hp'	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Pokemon methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:19'!defense   "return defense of pokemon"	^ defense! !!Pokemon methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:19'!hp	"return hp of pokemon"	^ hp! !!Pokemon methodsFor: 'setting' stamp: 'selimabenyakar 5/25/2016 12:19'!defense: anObject	"update defense of pokemon"	defense := anObject! !!Pokemon methodsFor: 'setting' stamp: 'selimabenyakar 5/25/2016 12:19'!hp: anObject	"update hp of pokemon"	hp := anObject! !!Pokemon methodsFor: 'abstract' stamp: 'selimabenyakar 5/25/2016 12:49'!attack"overwrite in each pokemon"! !Unit subclass: #PokemonMaster	instanceVariableNames: 'pokemon'	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!PokemonMaster methodsFor: 'setter' stamp: 'selimabenyakar 5/25/2016 12:45'!setPokemon: poke "set pokemon of  master"  pokemon:=poke.! !!PokemonMaster methodsFor: 'abstract' stamp: 'selimabenyakar 5/25/2016 12:46'!getAction: currentState"overwrite this in AttackOnly and Master2012400213"! !Pokemon subclass: #RockType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!RockType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!type"return type"  ^ 'RockType'.! !!RockType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!powerful"return types this type is powerful against"  ^ #('ElectricType').! !!RockType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!weak"return types this type is weak against"  ^ #('WaterType').! !Pokemon subclass: #GrassType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!GrassType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!type"return type"  ^ 'GrassType'.! !!GrassType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!powerful"return types this type is powerful against"  ^ #('WaterType').! !!GrassType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!weak"return types this type is weak against"  ^  #('FireType').! !GrassType subclass: #Oddish	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Oddish methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 45.	  defense:=1. 	 ! !!Oddish methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(5 6) shuffled at: 1.! !PokemonMaster subclass: #Master2012400213	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Master2012400213 methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:47'!initialize	"initialize Master2012400213 instance"	super initialize! !!Master2012400213 methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:59'!getAction: currentState| act |	"print current state"	Transcript show: 'enemy HP left: '.Transcript show: (currentState at: 1);cr.Transcript show: 'enemy type: '.Transcript show: (currentState at: 2);cr.Transcript show: 'enemy current defense value: '.Transcript show: (currentState at: 3);cr.Transcript show: 'enemy potion left: '.Transcript show: (currentState at: 4);cr.Transcript show: 'last action taken by enemy: '.Transcript show: (currentState at: 5);cr.Transcript show: '';cr.		"if special action is not permitted"(currentState at: 6) = false ifTrue:[		"if pokemon is powerful against enemy type always attack and use potion when hp<9"	(pokemon powerful includes: (currentState at: 2)) ifTrue:[			    		  (pokemon hp <9 & (currentState at: 7)=true) ifTrue:[act:='Potion'.]								ifFalse:[act:='Attack'.].	"if pokemon is weak against enemy type use potion when hp<15, attack when hp difference is greater than 15, if not do defense till defense is 6 and attack"	 		] ifFalse:[ (pokemon weak includes: (currentState at: 2)) ifTrue:[			 			(pokemon hp <15) & ((currentState at: 7)=true) ifTrue:[act:='Potion'.]								 	ifFalse:[((currentState at: 1)-pokemon hp) abs >15 ifTrue:[act:='Attack'.]									ifFalse:[pokemon defense < 6 ifTrue:[act:='Defense'.]																		 ifFalse:[act:='Attack'.].].]."if types of pokemons not weak or powerful against each other"					 ] ifFalse:[(pokemon hp <10 & (currentState at: 7)=true) ifTrue:[act:='Potion'.]						ifFalse:[(currentState at: 1)-pokemon hp > 10 ifTrue:[act:='Attack'.]							ifFalse:[(pokemon defense <6) & ((currentState at: 5)='Defense') ifTrue:[act:='Defense'.]								ifFalse:[(((currentState at: 1)-pokemon hp) abs >5 ) & ((currentState at: 1)>15) & (pokemon defense <6)ifTrue:[act:='Defense'.]								  ifFalse:[act:='Attack'.].].].].				].		].	  	"if special action permitted"	]ifFalse:[ 			"if pokemon is powerful against enemy type always attack and use potion when hp<9"		(pokemon powerful includes: (currentState at: 2)) ifTrue:[		    		  (pokemon hp <9 & (currentState at: 7)=true) ifTrue:[act:='Potion'.]								ifFalse:[act:='Attack'.].				"if pokemon is weak against enemy type use potion when hp<15, do defense until defense is 7, from now on do special action and attack every 2 turns" 		] ifFalse:[ (pokemon weak includes: (currentState at: 2)) ifTrue:[			 			(pokemon hp <15) & ((currentState at: 7)=true) ifTrue:[act:='Potion'.]								 	ifFalse:[pokemon defense < 7 ifTrue:[act:='Defense'.]									ifFalse:[(currentState at: 8)=false ifTrue:[act:='Special Action'.] ifFalse:[act:='Attack'].].].				"if types of pokemons not weak or powerful against each other"																	 ] ifFalse:[(pokemon hp <10 & (currentState at: 7)=true) ifTrue:[act:='Potion'.]						ifFalse:[(currentState at: 1)-pokemon hp > 10 ifTrue:[act:='Attack'.]							ifFalse:[(pokemon defense <6) & ((currentState at: 5)='Defense') ifTrue:[act:='Defense'.]								ifFalse:[(((currentState at: 1)-pokemon hp) abs >5 ) & ((currentState at: 1)>15) & (pokemon defense <6)ifTrue:[act:='Defense'.]								  ifFalse:[act:='Attack'.].].].].				].		].	].							^ act. ! !PokemonMaster subclass: #AttackOnly	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!AttackOnly methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:29'!getAction: currentState"print current state"Transcript show: 'enemy HP left: '.Transcript show: (currentState at: 1);cr.Transcript show: 'enemy type: '.Transcript show: (currentState at: 2);cr.Transcript show: 'enemy current defense value: '.Transcript show: (currentState at: 3);cr.Transcript show: 'enemy potion left: '.Transcript show: (currentState at: 4);cr.Transcript show: 'last action taken by enemy: '.Transcript show: (currentState at: 5);cr.Transcript show: '';cr."always attack"^ 'Attack'.! !!AttackOnly methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:29'!initialize	"initialize attack only instance"	super initialize	! !GrassType subclass: #Bulbasaur	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Bulbasaur methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 45.	  defense:=1. 	 ! !!Bulbasaur methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(4 5 6) shuffled at: 1.! !Pokemon subclass: #WaterType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!WaterType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!type"return type"  ^ 'WaterType'.! !!WaterType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!powerful"return types this type is powerful against"  ^ #('RockType' 'FireType').! !!WaterType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!weak"return types this type is weak against"  ^ #('ElectricType' 'Grass').! !WaterType subclass: #Krabby	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Krabby methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 30.	  defense:=1. 	  ! !!Krabby methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(10 11) shuffled at: 1.! !Pokemon subclass: #ElectricType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!ElectricType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!type"return type"  ^ 'ElectricType'.! !!ElectricType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!weak"return types this type is weak against"  ^ #('RockType').! !!ElectricType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:20'!powerful"return types this type is powerful against"  ^  #('WaterType').! !ElectricType subclass: #Voltorb	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Voltorb methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!attack"return a random attack"^ #(3 4 5) shuffled at: 1.! !!Voltorb methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 40.	  defense:=1. 	! !RockType subclass: #Geodude	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Geodude methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(8 9) shuffled at: 1.! !!Geodude methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 40.	  defense:=2. 	 ! !ElectricType subclass: #Pikachu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Pikachu methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!attack"return a random attack" ^	 #(6 7 8) shuffled at: 1.! !!Pikachu methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 13:09'!initialize	"initialize pokemon with given hp and defense"   super initialize.	  hp:= 35.	  defense:=1. 	! !WaterType subclass: #Squirtle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Squirtle methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ attack:= #(4 5 6 7) shuffled at: 1.! !!Squirtle methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:28'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 44.	  defense:=1. 	 ! !RockType subclass: #Onix	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Onix methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(4 5 6 7) shuffled at: 1.! !!Onix methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 35.	  defense:=3. 	  ! !Pokemon subclass: #FireType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!FireType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!type"return type"  ^ 'FireType'.! !!FireType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:20'!powerful"return types this type is powerful against"  ^ #('GrassType').! !!FireType methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:21'!weak"return types this type is weak against"  ^ #('WaterType').! !FireType subclass: #Magmar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Magmar methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:23'!attack"return a random attack"^ #(9 10) shuffled at: 1.! !!Magmar methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 65.	  defense:=1. 	 ! !FireType subclass: #Charmender	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2012400213'!!Charmender methodsFor: 'constructor' stamp: 'selimabenyakar 5/25/2016 12:27'!initialize		"initialize pokemon with given hp and defense"   super initialize.	  hp:= 39.	  defense:=1. 	! !!Charmender methodsFor: 'accessing' stamp: 'selimabenyakar 5/25/2016 12:22'!attack"return a random attack"^ #(5 6 7 8) shuffled at: 1.! !